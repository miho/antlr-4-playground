{"name":"Antlr-4-playground","body":"ANTLR-v4 Playground\r\n===================\r\n\r\n## Disclaimer\r\n\r\nI am not an expert in the area of language processing. Everything written below is just my humble opinion.\r\nIf you think I am wrong *please* correct me! I share my thoughts in the hope they will be useful for someone. \r\n\r\n## Motivation\r\n\r\nSince a while I am evaluating several parser generators for small and mid-size projects. I have tried [ANTLR v3](http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home) and some other alternatives. I even tried some PEG libraries such as [parboiled](https://github.com/sirthias/parboiled/wiki). That's\r\nwhy I created this playground project which contains small example applications that make use of \r\nANTLR v4.\r\n\r\n## Options\r\n\r\n### ANTLR v3:\r\n\r\nANTLR developers made several design decisions that kept me from using ANTLR. What I really dislike is the fact that one has to mix different languages in one file (the grammar file). There will never be an IDE or editor that provides good support for that. However, good IDE support highly increases productivity. Even though ANTLR supports different target languages such as C it is not easy to reuse one grammar for different target languages. Another problem is the fact that even for relatively simple applications it is necessary to mess around with tree creation etc. For small applications such as mine it was no fun at all!\r\n\r\n### parboiled\r\n\r\nFirst of all, I really like [parboiled](https://github.com/sirthias/parboiled/wiki) for its simplicity. It is possible to directly use Java or Scala to define the grammar. This is really clever. Doing that you can always claim to have good IDE support. What I don't like is that with PEG grammars rule orders and spaces do matter a lot! This is a huge disadvantage.\r\n\r\n### ANTLR v4\r\n\r\nI almost decided to use *parboiled* instead of *ANTLR v3*. But when I tried *ANTLR v4* I was really impressed how simple it is. It seems like the developers have totally changed their mind regarding what matters most. *Great!* Grammar and code are strictly separated from each other. In addition to the automatically generated parser it is possible to use *visitors* to walk through the parse tree.\r\n\r\n> Which tree? Yes, you guessed right. The tree is automatically generated!\r\n\r\nAs it is possible to create labels in the grammar file the visitors automatically get the right methods.\r\nThis is a nice way to integrate the grammar into the target language. \r\n\r\n> **AUTOMATIC** . How often did I use this word in the last section? *ANTLR v4* seems to be all about automation and\r\n>  simplicity. Great!\r\n\r\n### Summary\r\n\r\nFinally, *ANTLR v4* seems to be the way to go. The [expr](https://github.com/miho/antlr-4-playground/tree/master/experiments/expr) project demonstrates how easy it is to write an expression evaluator.\r\n\r\n## Project Details\r\n\r\n- Playground for upcoming ANTLR 4 version\r\n\r\n- It contains a NetBeans Project for *ANTLR v4* and experimental applications.\r\n\r\n> **NOTE**\r\n>\r\n> I _HATE_ Maven like dependencies. They never work. There is always a missing library.\r\n> That is why ANTLR sources and binary build dependencies are included.\r\n\r\n## Compile\r\n\r\nOpen the `antlr-4` project in NetBeans (location: `antlr/antlr-4`) and build the project.\r\nThe final ANTLR library can be found in the `antlr/deploy` folder.\r\n\r\n## Try Experimental Applications\r\n\r\nOpen one of the NetBeans projects that are located in the `antlr/experiments` folder and run it.","tagline":"Playground for upcoming ANTLR 4 version","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}